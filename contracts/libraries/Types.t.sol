// SPDX-License-Identifier: GPL-v3
pragma solidity ^0.8.0;

import "./MerkleMountainRange.sol";
import "./RLPReader.sol";
import "./BytesSlice.sol";
import "./Types.sol";

contract TestTypes {
    function testDecodeMMRFromRlpHeader() public pure {
        bytes32 mixDigest = bytes32(0xbd4472abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff498);
        uint64 nonce = uint64(bytes8(0xa13a5a8c8f2bb1c4));
        bytes
            memory rlpHeader = hex"f9021aa00000000000000000000000000000000000000000000000000000000000000000a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017a0e6e49996c7ec59f7a23d22b83239a60151512c65613bf84a0d7da336399ebc4aa0cafe75574d59780665a97fbfd11365c7545aa8f1abf4e5e12e8243334ef7286bbfefd882a410845506eb0796636f6f6c65737420626c6f636b206f6e20636861696ea0bd4472abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff49888a13a5a8c8f2bb1c488016345785d8a0000";
        (bytes32 mmrRoot, uint64 mmrSize) = Types.decodeMMRFromRlpHeader(rlpHeader);
        require(mmrRoot == mixDigest, "mismatch mmr root");
        require(mmrSize == nonce, "mismatch mmr size");

        mixDigest = bytes32(0x000072abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff498);
        nonce = uint64(bytes8(0x00005a8c8f2bb1c4));
        rlpHeader = hex"f9021aa00000000000000000000000000000000000000000000000000000000000000000a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017a0e6e49996c7ec59f7a23d22b83239a60151512c65613bf84a0d7da336399ebc4aa0cafe75574d59780665a97fbfd11365c7545aa8f1abf4e5e12e8243334ef7286bbfefd882a410845506eb0796636f6f6c65737420626c6f636b206f6e20636861696ea0000072abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff4988800005a8c8f2bb1c488016345785d8a0000";
        (mmrRoot, mmrSize) = Types.decodeMMRFromRlpHeader(rlpHeader);
        require(mmrRoot == mixDigest, "mismatch mmr root when digest bytes header is 0");
        require(mmrSize == nonce, "mismatch mmr size when nonce bytes header is 0");
    }
}
